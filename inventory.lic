custom_require.call(%w[common])

@settings = get_settings
sorted_contents = {}
$ORDINALS = %w[first second third fourth fifth sixth seventh eighth ninth tenth eleventh]

if Script.running?('textsubs')
  stop_script('textsubs')
  before_dying { start_script('textsubs') }
end
if Script.running?('sorter')
  stop_script('sorter')
  before_dying { start_script('sorter') }
end

def get_noun(long_name)
  remove_flavor_text(long_name).strip.scan(/[a-z\-']+$/i).first
end

def remove_flavor_text(item)
  # link is to online regex expression tester
  #https://regex101.com/r/4lGY6u/10
  item.sub(/\s?\b(?:(?:colorfully and )?(?:artfully|artistically|attractively|beautifully|bl?ack-|cleverly|clumsily|crudely|deeply|delicately|edged|elaborately|faintly|flamboyantly|front-|fully|gracefully|heavily|held|intricately|lavishly|masterfully|plentifully|prominantly|roughly|securely|sewn|shabbily|shadow-|simply|somberly|skillfully|sloppily|starkly|stitched|tied and|tightly|well-)\s?)?(?:accented|accentuated|acid-etched|adorned|affixed|appliqued|assembled|attached|augmented|awash|backed|back-laced|balanced|banded|batiked|beaded|bearded|bearing|bedazzled|bedecked|bejeweled|beset|bestrewn|blazoned|bordered|bound|braided|branded|brocaded|bristling|brushed|buckled|burned|buttoned|caked|camouflaged|capped|carved|caught|centered|chased|chiseled|cinched|circled|clasped|cloaked|closed|coated|cobbled together|coiled|colored|composed|connected|constructed|countoured|covered|crafted|crested|crisscrossed|crowded|crowned|cuffed|cut|dappled|decorated|deformed|depicting|designed|detailed|discolored|displaying|divided|done|dotted|draped|drawn|drizzled|dusted|edged|elaborately|embedded|embell?ished|emblazed|emblazoned|embossed|embroidered(?: all over| painstakingly)?|enameled(?: across)?|encircled|encrusted|engraved|engulfed|enhanced|entwined|equipped|etched|fashioned(?: so)?|fastened|feathered|featuring|festooned|fettered|filed|filled|firestained|fit|fitted|fixed|flecked|fletched|forged|formed|framed|fringed|frosted|full|gathered|gleaming|glimmering|glittering|goldworked|growing|gypsy-set|hafted|hand-tooled|hanging|heavily(?:-beaded| covered)?|held fast|hemmed|hewn|hideously|highlighted|hilted|honed|hung|impressed|incised|ingeniously repurposed|inscribed|inlaid|inset|interlaced|interspersed|interwoven|jeweled|joined|laced(?: up)?|lacquered|laden|layered|limned|lined|linked|looped|knotted|made|marbled|marked|marred|meshed|mosaicked|mottled|mounted|oiled|oozing|outlined|ornamented|overlai(?:d|n)|padded|painted|paired|patched|pattern-welded|patterned|pinned|plumed|polished|printed|reinforced|reminiscent|rendered|revealing|riddled|ridged|rimed|ringed|riveted|sashed|scarred|scattered|scorched|sculpted|sealed|seamed|secured|securely|set|sewn|shaped|shimmering|shod|shot|shrouded|side-laced|slashed|slung|smeared|smudged|spangled|speckled|spiraled|splatter-dyed|splattered|spotted|sprinkled|stacked|surmounted|surrounded|suspended|stained|stamped|starred|stenciled|stippled|stitched(?: together)?|strapped|streaked|strengthened|strewn|striated|striped|strung|studded|swathed|swirled|tailored|tangled|tapered|tethered|textured|threaded|tied|tightly|tinged|tinted|tipped|tooled|topped|traced|trimmed|twined|veined|vivified|washed|webbed|weighted|whorled|worked|worn|woven|wrapped|wreathed|wrought)?\b ["]?\b(?:a hand-tooled|across|along|an|around|atop|bearing|belted|bright streaks|designed|detailing|down (?:each leg|one side)|dyed (?:a|and|deep|in|night|rust|shimmering|the|to|with)|engravings|entitled|errant pieces|featuring|flaunting|frescoed|from|Gnomish Pride|(?:encased |quartered )?in(?: the)?|into|labeled|leading|like|matching|on|out|overlayed gleaming silver|resembling|shades of color|sporting|surrounding|that|the|through|tinged somber black|titled|to|upon|WAR MONGER|with|within|\b(?:at|bearing|(?:accented |held |secured )?by|carrying|clutching|colored|cradling|dangling|depicting|(?:prominently )?displaying|embossed|etched|featuring|for(?:ming)?|holding|of|over|patterned|striped|suspending|textured|that)\b \b(?:a (?:band|beaded|brass|cascade|cluster|coral|crown|dead|.+ (?:ingot|boulder|stone|rock|nugget)|fierce|fanged|fringe|glowing|golden|grinning|howling|large|lotus|mosaic|pair|poorly|rainbow|roaring|row|silver(?:y|weave)?|small|snarling|spray|tailored|thick|tiny|trio|turquoise|yellowed)|(?:squared )?agonite (?:links|decorated)|alternating|an|(?:purple |blue )?and|ash|beaded fringe|blackened (?:steel(?: accents| bearing| with|$)|ironwood)|blue (?:gold|steel)|burnished golden|cascading layers|carved ivory|chain-lined|chitinous|(?:deep red|dull black|pale blue) cloth|cloudberry blossoms|colorful tightly|cotton candy|crimson steel|crisscrossed|curious design|curved|crystaline charm|dark (?:blue|green|grey|metals|windsteel) (?:and|exuding|glaes|hues|khor'vela|muracite|pennon|with)|dark supple|deepest|deeply blending|delicate|dusky (?:dreamweave|green-grey)|ebonwood$|emblazoned|enamel?led (?:steel|bronze)|etched|fine(?:-grained| black| crushed)|finely wrought|flame-kissed|forest|fused-together|fuzzy grey|gauze atop|gilded steel|glass eyeballs|glistening green|golden oak|grey fur|hammered|haralun|has|heavy (?:grey|pearl|silver)|horn|Ilithi cedar|inky black|interlocking silver|interwoven|iridescent|jagged interlocking plates|(?:soft dark|supple|thick|woven) (?:bolts|leather)|lightweight|long swaths|lustrous|kertig ravens|made|metal cogs|mirror-finished|mottled|multiple woods|naphtha|oak|oblong sanguine|one|onyx buttons|opposing images|overlapping|pale cerulean|pallid links|pastel-hued|pins|pitted (?:black iron|steel)|plush velvet|polished (?:bronze|hemlock|steel)|raccoon tails|ram's horns|rat pelts|raw|red and blue|rich (?:purple|golden)|riveted bindings|roughened|rowan|sanguine thornweave|scattered star|scorch marks|sculpted|shadows|shark cartilage|shifting (?:celadon|shades)|shipboard|(?:braided |cobalt |deep black |desert-tan |dusky red Taisidon |ebony |exquisite spider|fine leaf-green |flowing night|glimmering ebony |heavy |marigold |pale gold marquisette and virid |rich copper |spiral-braided |steel|unadorned black Musparan )?silk(?:cress)?|(?:coiled |shimmering )?silver(?:steel| and |y)?|sirese blue spun glitter|six crossed|slender|small bones|smoothly interlocking|snow leopard|soft brushed|somber black|sprawled|sun-bleached|steel links|stones|strips of|sunny yellow|teardrop plates|telothian|the|tiny (?:golden|indurium|scales|skull)|tightly braided|tomiek|torn|twists|two|undyed|vibrant multicolored|viscous|waves of|weighted|well-cured|white ironwood|windstorm gossamer|wintry faeweave|woven diamondwood))\b.*/, '')
end

def bput(message, *matches)
  waitrt?
  log = []
  matches.flatten!
  matches.map! { |item| item.is_a?(Regexp) ? item : /#{item}/i }
  clear
  put message
  timer = Time.now
  while (response = get?) || (Time.now - timer < 15)

    if response.nil?
      pause 0.1
      next
    end

    log += [response]

    case response
    when /(?:\.\.\.wait |Wait |\.\.\. wait )([0-9]+)/
      pause(Regexp.last_match(1).to_i - 0.9)
      waitrt?
      put message
      timer = Time.now
      next
    when /Sorry, you may only type ahead/
      pause 1
      put message
      timer = Time.now
      next
    when /^You are a bit too busy performing to do that/, /You should stop playing before you do that/
      put 'stop play'
      put message
      timer = Time.now
      next
    when /would give away your hiding place/
      release_invisibility
      put 'unhide'
      put message
      timer = Time.now
      next
    when /^You are still stunned/, /^You can't do that while entangled in a web/
      pause 0.5
      put message
      timer = Time.now
      next
    end

    matches.each do |match|
      if (result = response.match(match))
        return result.to_a.first
      end
    end
  end
  echo '*** No match was found after 15 seconds, dumping info'
  echo "messages seen length: #{log.length}"
  log.reverse.each { |logged_response| echo "message: #{logged_response}" }
  echo "checked against #{matches}"
  echo "for command #{message}"
  ''
end

action = proc { |s|
  if s =~ /^([IO]n the .*?) (you see .*\.)/
    container = Regexp.last_match(1)
    contents = Regexp.last_match(2)
  elsif s =~ /^(You rummage .*?)( and see .*?\.)/
    container = Regexp.last_match(1)
    contents = Regexp.last_match(2)
  elsif s =~ /You are wearing (.*\.)/
    container = 'Inventory'
    contents = 'and see ' + Regexp.last_match(1)
  end
  
  container = container.sub(/^([IO]n the )|You rummage (?:through |around on )?(a|an|some) /,'')
  if contents =~ /(?:and|you) see (.*)\./
    if contents = Regexp.last_match(1).strip.split(/,(?=\s\ba\b|\s\ban\b|\s\bsome\b|\s\bthe\b)|\sand\s(?:<pushBold\/>)?(?=\ba\b|\ban\b|\bsome\b|\bthe\b)/i).reject(&:empty?)
      contents.each do |item|
        item = item.sub(/^\s*?\b(?:a|an|some|and|the)\b\s/, '')
        next if item =~ /bottom drawer|brass hook|large shelf|middle drawer|small shelf|steel wire rack|top drawer/
        sorted_contents[container] ||= {}
        sorted_contents ||= {}
        if sorted_contents[container][item]['count'].nil?
          sorted_contents[container][item] = {}
          sorted_contents[container][item]['count'] = 1
        else
          sorted_contents[container][item]['count'] += 1
        end
      end
    end
    sorted_contents[container] = sorted_contents[container].sort
  end
  
  s
}

before_dying do
  DownstreamHook.remove('inventory')
end

DownstreamHook.add('inventory', action)

fput('inventory')

fput('inventory container')
waitfor('All of your containers:')
invcontainers = []
while (line = get)
  break if line =~ /Type INVENTORY HELP for more options/
  invcontainers.push(line)
end

invcontainers.each_index do |index|
  invcontainers[index].sub!(/^\s*?\b(?:a|an|some|and|the)\b\s/, '')
  invcontainers[index].sub!(/ \(closed\)/,'')
  invcontainers[index] = get_noun(invcontainers[index])
end
invcontainers = invcontainers.sort!.inject(Hash.new(0)) { |h,e| h[e] += 1; h }

invcontainers.each do |key, value|
  for i in 0..value-1
    case bput("rummage in #{$ORDINALS[i]} #{key}", "That would accomplish nothing.", "You rummage through", "You can't rummage around", "While it's closed?", "You should just look")
    when /You can't rummage around|You should just look/
      case bput("look in #{$ORDINALS[i]} #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{$ORDINALS[i]} #{key}", "You")
        fput("look in #{$ORDINALS[i]} #{key}")
        bput("close #{$ORDINALS[i]} #{key}", "You")
      end
    when /While it's closed?/
      bput("open #{$ORDINALS[i]} #{key}", "You")
      case bput("rummage in #{$ORDINALS[i]} #{key}", "That would accomplish nothing.", "You rummage through", "You can't rummage around", "While it's closed?", "You should just look")
      when /That would accomplish nothing|You can't rummage around|You should just look/
        fput("look in #{$ORDINALS[i]} #{key}")
      end
      bput("close #{$ORDINALS[i]} #{key}", "You")
    when /That would accomplish nothing/
      case bput("look on #{$ORDINALS[i]} #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{$ORDINALS[i]} #{key}", "You")
        fput("look on #{$ORDINALS[i]} #{key}")
        bput("close #{$ORDINALS[i]} #{key}", "You")
      end
    end
  end
end

if Room.current.title[0] =~ /Carousel Chamber/
  fput('open vault')
  vault = ["vault"]
  vault += ["hook", "wire rack", "small shelf", "large shelf", "top drawer", "middle drawer", "bottom drawer"] if UserVars.premium

  vault.each do |key|
    case bput("rummage in #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
    when /You can't rummage|You should just look/
      case bput("look in #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{key}", "You")
        fput("look in #{key}")
        bput("close #{key}", "You")
      end
    when /While it's closed?/
      bput("open #{key}", "You")
      case bput("rummage in #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
      when /That would accomplish nothing|You can't rummage|You should just look/
        fput("look in #{key}")
      end
      bput("close #{key}", "You")
    when /That would accomplish nothing/
      case bput("look in #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{key}", "You")
        fput("look in #{key}")
        bput("close #{key}", "You")
      end
    end
    case bput("rummage on #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
    when /You can't rummage|You should just look/
      case bput("look on #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{key}", "You")
        fput("look on #{key}")
        bput("close #{key}", "You")
      end
    when /While it's closed?/
      bput("open #{key}", "You")
      case bput("rummage on #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
      when /That would accomplish nothing|You can't rummage|You should just look/
        fput("look on #{key}")
      end
      bput("close #{key}", "You")
    when /That would accomplish nothing/
      case bput("look on #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{key}", "You")
        fput("look on #{key}")
        bput("close #{key}", "You")
      end
    end
    case bput("rummage behind #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
    when /You can't rummage|You should just look/
      case bput("look behind #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{key}", "You")
        fput("look behind #{key}")
        bput("close #{key}", "You")
      end
    when /While it's closed?/
      bput("open #{key}", "You")
      case bput("rummage behind #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
      when /That would accomplish nothing|You can't rummage|You should just look/
        fput("look behind #{key}")
      end
      bput("close #{key}", "You")
    when /That would accomplish nothing/
      case bput("look behind #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{key}", "You")
        fput("look behind #{key}")
        bput("close #{key}", "You")
      end
    end
    case bput("rummage under #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
    when /You can't rummage|You should just look/
      case bput("look under #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{key}", "You")
        fput("look under #{key}")
        bput("close #{key}", "You")
      end
    when /While it's closed?/
      bput("open #{key}", "You")
      case bput("rummage under #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
      when /That would accomplish nothing|You can't rummage|You should just look/
        fput("look under #{key}")
      end
      bput("close #{key}", "You")
    when /That would accomplish nothing/
      case bput("look under #{key}", "That is closed.", "There is nothing", "you see")
      when /That is closed/
        bput("open #{key}", "You")
        fput("look under #{key}")
        bput("close #{key}", "You")
      end
    end
  end
end


File.open("Scripts\\"+Char.name+".csv", 'w+b') do |csv|
  csv.puts 'Item, Count, Location'
  sorted_contents.each do |key, value|
    value.each do |x|
      csv.puts "#{x[0]}, #{x[1].to_h['count']}, #{key}"
    end
  end
end
