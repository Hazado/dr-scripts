custom_require.call(%w[common])


class Inventory
  include DRC

  @settings = get_settings
  sorted_contents = {}
  $ORDINALS = %w[first second third fourth fifth sixth seventh eighth ninth tenth eleventh]

  if Script.running?('textsubs')
    stop_script('textsubs')
    before_dying { start_script('textsubs') }
  end
  if Script.running?('sorter')
    stop_script('sorter')
    before_dying { start_script('sorter') }
  end

  action = proc { |s|
    if s =~ /^([IO]n the .*?) (you see .*\.)/
      container = Regexp.last_match(1)
      contents = Regexp.last_match(2)
    elsif s =~ /^(You rummage .*?)( and see .*?\.)/
      container = Regexp.last_match(1)
      contents = Regexp.last_match(2)
    elsif s =~ /You are wearing (.*\.)/
      container = 'Inventory'
      contents = 'and see ' + Regexp.last_match(1)
    end
    
    container = container.sub(/^([IO]n the )|You rummage (?:through |around on )?(a|an|some) /,'')
    if contents =~ /(?:and|you) see (.*)\./
      if contents = DRC.list_to_array(Regexp.last_match(1))
        contents.each do |item|
          item = item.sub(/^\s*?\b(?:a|an|some|and|the)\b\s/, '')
          next if item =~ /bottom drawer|brass hook|large shelf|middle drawer|small shelf|steel wire rack|top drawer/
          sorted_contents[container] ||= {}
          sorted_contents ||= {}
          if sorted_contents[container][item]['count'].nil?
            sorted_contents[container][item] = {}
            sorted_contents[container][item]['count'] = 1
          else
            sorted_contents[container][item]['count'] += 1
          end
        end
      end
      sorted_contents[container] = sorted_contents[container].sort
    end
    
    s
  }

  before_dying do
    DownstreamHook.remove('inventory')
  end

  DownstreamHook.add('inventory', action)

  fput('inventory')

  fput('inventory container')
  waitfor('All of your containers:')
  invcontainers = []
  while (line = get)
    break if line =~ /Type INVENTORY HELP for more options/
    invcontainers.push(line)
  end

  invcontainers.each_index do |index|
    invcontainers[index].sub!(/^\s*?\b(?:a|an|some|and|the)\b\s/, '')
    invcontainers[index].sub!(/ \(closed\)/,'')
    invcontainers[index] = DRC.get_noun(invcontainers[index])
  end
  invcontainers = invcontainers.sort!.inject(Hash.new(0)) { |h,e| h[e] += 1; h }

  invcontainers.each do |key, value|
    for i in 0..value-1
      case DRC.bput("rummage in #{$ORDINALS[i]} #{key}", "That would accomplish nothing.", "You rummage through", "You can't rummage around", "While it's closed?", "You should just look")
      when /You can't rummage around|You should just look/
        case DRC.bput("look in #{$ORDINALS[i]} #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{$ORDINALS[i]} #{key}", "You")
          fput("look in #{$ORDINALS[i]} #{key}")
          DRC.bput("close #{$ORDINALS[i]} #{key}", "You")
        end
      when /While it's closed?/
        DRC.bput("open #{$ORDINALS[i]} #{key}", "You")
        case DRC.bput("rummage in #{$ORDINALS[i]} #{key}", "That would accomplish nothing.", "You rummage through", "You can't rummage around", "While it's closed?", "You should just look")
        when /That would accomplish nothing|You can't rummage around|You should just look/
          fput("look in #{$ORDINALS[i]} #{key}")
        end
        DRC.bput("close #{$ORDINALS[i]} #{key}", "You")
      when /That would accomplish nothing/
        case DRC.bput("look on #{$ORDINALS[i]} #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{$ORDINALS[i]} #{key}", "You")
          fput("look on #{$ORDINALS[i]} #{key}")
          DRC.bput("close #{$ORDINALS[i]} #{key}", "You")
        end
      end
    end
  end

  if Room.current.title[0] =~ /Carousel Chamber/
    fput('open vault')
    vault = ["vault"]
    vault += ["hook", "wire rack", "small shelf", "large shelf", "top drawer", "middle drawer", "bottom drawer"] if UserVars.premium

    vault.each do |key|
      case DRC.bput("rummage in #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
      when /You can't rummage|You should just look/
        case DRC.bput("look in #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{key}", "You")
          fput("look in #{key}")
          DRC.bput("close #{key}", "You")
        end
      when /While it's closed?/
        DRC.bput("open #{key}", "You")
        case DRC.bput("rummage in #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
        when /That would accomplish nothing|You can't rummage|You should just look/
          fput("look in #{key}")
        end
        DRC.bput("close #{key}", "You")
      when /That would accomplish nothing/
        case DRC.bput("look in #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{key}", "You")
          fput("look in #{key}")
          DRC.bput("close #{key}", "You")
        end
      end
      case DRC.bput("rummage on #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
      when /You can't rummage|You should just look/
        case DRC.bput("look on #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{key}", "You")
          fput("look on #{key}")
          DRC.bput("close #{key}", "You")
        end
      when /While it's closed?/
        DRC.bput("open #{key}", "You")
        case DRC.bput("rummage on #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
        when /That would accomplish nothing|You can't rummage|You should just look/
          fput("look on #{key}")
        end
        DRC.bput("close #{key}", "You")
      when /That would accomplish nothing/
        case DRC.bput("look on #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{key}", "You")
          fput("look on #{key}")
          DRC.bput("close #{key}", "You")
        end
      end
      case DRC.bput("rummage behind #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
      when /You can't rummage|You should just look/
        case DRC.bput("look behind #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{key}", "You")
          fput("look behind #{key}")
          DRC.bput("close #{key}", "You")
        end
      when /While it's closed?/
        DRC.bput("open #{key}", "You")
        case DRC.bput("rummage behind #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
        when /That would accomplish nothing|You can't rummage|You should just look/
          fput("look behind #{key}")
        end
        DRC.bput("close #{key}", "You")
      when /That would accomplish nothing/
        case DRC.bput("look behind #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{key}", "You")
          fput("look behind #{key}")
          DRC.bput("close #{key}", "You")
        end
      end
      case DRC.bput("rummage under #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
      when /You can't rummage|You should just look/
        case DRC.bput("look under #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{key}", "You")
          fput("look under #{key}")
          DRC.bput("close #{key}", "You")
        end
      when /While it's closed?/
        DRC.bput("open #{key}", "You")
        case DRC.bput("rummage under #{key}", "That would accomplish nothing.", "You rummage", "You can't rummage", "While it's closed?", "You should just look")
        when /That would accomplish nothing|You can't rummage|You should just look/
          fput("look under #{key}")
        end
        DRC.bput("close #{key}", "You")
      when /That would accomplish nothing/
        case DRC.bput("look under #{key}", "That is closed.", "There is nothing", "you see")
        when /That is closed/
          DRC.bput("open #{key}", "You")
          fput("look under #{key}")
          DRC.bput("close #{key}", "You")
        end
      end
    end
  end

  UserVars.InventoryTemp = sorted_contents
  start_script("invwriter")
end

Inventory.new
